{
  "address": "0x5788D95f90ad450FDc8E70545C9B74a2aEABb1B5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_appId",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_action",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractDeauthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "InsuranceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "insuree",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "InsuranceBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "insuree",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "InsuranceClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "character",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorAdded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "alreadyFundedInsuranceProviders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "character",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "claimInsurancePayout",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimablePayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "fundInsurance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundedInsuranceProviders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "getInsuranceFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInsuranceProviders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasProvidedLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insuranceIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insuranceliquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insurancelps",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insurances",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "enum InsuranceData.TypeOfInsurance",
          "name": "typeOfIns",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "lat",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lon",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "riskNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "riskDenominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registeredInsuranceProviderAddress",
          "type": "address"
        }
      ],
      "name": "isInsuranceProviderRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "isNotInsured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityperlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOfInsuranceProviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numliquidityproviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "insuree",
          "type": "address"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "providers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_insuranceName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "enum InsuranceData.TypeOfInsurance",
          "name": "_typeOfIns",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_lat",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_lon",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_riskNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_riskDenominator",
          "type": "uint256"
        }
      ],
      "name": "registerInsurance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "registerInsuranceProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "successfulRegistration",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdc33f6c7c5171271c931cb27757f4baba41b160f42ca905e4fbe3f7d17a789e1",
  "receipt": {
    "to": null,
    "from": "0xD5c08CfBe6C6663e0A3203DA8d5CFECbF10116dB",
    "contractAddress": "0x5788D95f90ad450FDc8E70545C9B74a2aEABb1B5",
    "transactionIndex": 37,
    "gasUsed": "3911941",
    "logsBloom": "0x
    "blockHash": "0x00eb1f3a2901308e3b5a1cb8bd07924b3734c418c2fea4e7601971737cf212c4",
    "transactionHash": "0xdc33f6c7c5171271c931cb27757f4baba41b160f42ca905e4fbe3f7d17a789e1",
    "logs": [],
    "blockNumber": 6306064,
    "cumulativeGasUsed": "10825578",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x469449f251692E0779667583026b5A1E99512157",
    "app_staging_82d304654019266eb39a83b29a806fe2",
    "inslogin"
  ],
  "numDeployments": 1,
  "solcInputHash": "21fff1a521621e8619a7705eb8541d5e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_appId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_action\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractDeauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"InsuranceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"InsuranceBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"InsuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"character\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyFundedInsuranceProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"character\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"claimInsurancePayout\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimablePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"fundInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundedInsuranceProviders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"getInsuranceFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInsuranceProviders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasProvidedLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceliquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insurancelps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insurances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"enum InsuranceData.TypeOfInsurance\",\"name\":\"typeOfIns\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lon\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"riskNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registeredInsuranceProviderAddress\",\"type\":\"address\"}],\"name\":\"isInsuranceProviderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"isNotInsured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityperlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfInsuranceProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numliquidityproviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"insuree\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_insuranceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"enum InsuranceData.TypeOfInsurance\",\"name\":\"_typeOfIns\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_lon\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_riskNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskDenominator\",\"type\":\"uint256\"}],\"name\":\"registerInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"registerInsuranceProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"successfulRegistration\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint256)\":{\"details\":\"Buy weather insurance.\"},\"claimInsurancePayout(uint256)\":{\"details\":\"Claim insurance\"},\"constructor\":{\"details\":\"Constructor      initialize global variable for insurance ids\"},\"fundInsurance(uint256)\":{\"details\":\"liquidity providers can deposit funds in any amount to support any insurance\"},\"getInsuranceFunds(uint256)\":{\"details\":\"to see how much fund an insurance is supported with\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"payout(uint256,address)\":{\"details\":\"Transfers eligible payout funds to insuree\"},\"registerInsurance(string,uint256,uint256,uint8,string,string,string,uint256,uint256)\":{\"details\":\"Register insurance by provising all required fields. The caller should be an insurance provider\"},\"registerInsuranceProvider(address)\":{\"details\":\"Add an insurance to the registration queue      Can only be called from InsuranceApp contract\"},\"registerValidator()\":{\"details\":\"to register a validator.\"}},\"stateVariables\":{\"externalNullifierHash\":{\"details\":\"The keccak256 hash of the externalNullifier (unique identifier of the action performed), combination of appId and action\"},\"groupId\":{\"details\":\"The World ID group ID (1 for Orb-verified)\"},\"nullifierHashes\":{\"details\":\"Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\"},\"worldId\":{\"details\":\"The address of the World ID Router contract that will be used for verifying proofs\"}},\"version\":1},\"userdoc\":{\"errors\":{\"InvalidNullifier()\":[{\"notice\":\"Thrown when attempting to reuse a nullifier\"}]},\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceData.sol\":\"InsuranceData\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/InsuranceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport { FunctionsClient } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport { ConfirmedOwner } from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport { FunctionsRequest } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./interfaces/IWorldID.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract InsuranceData is FunctionsClient, ConfirmedOwner {\\n  /********************************************************************************************/\\n  /*                                       DATA VARIABLES                                     */\\n  /********************************************************************************************/\\n  using FunctionsRequest for FunctionsRequest.Request;\\n  bytes32 public s_lastRequestId;\\n  bytes public s_lastResponse;\\n  bytes public s_lastError;\\n\\n  address private contractOwner; // Account used to deploy contract\\n  mapping(address => bool) private registeredInsuranceProvider;\\n  address[] public providers;\\n  address[] public alreadyFundedInsuranceProviders;\\n  mapping(uint256 => uint256) public numliquidityproviders;\\n  mapping(uint256 => address[]) public insurancelps;\\n  mapping(uint256 => uint256) public insuranceliquidity;\\n  mapping(uint256 => mapping(address => bool)) public hasProvidedLiquidity;\\n  mapping(address => mapping(uint256 => uint256)) public claimablePayout;\\n  enum TypeOfInsurance {\\n    Rain,\\n    Heat,\\n    ExtremeConditions\\n  }\\n  struct Insurance {\\n    bool isRegistered;\\n    uint256 start;\\n    uint256 end;\\n    TypeOfInsurance typeOfIns;\\n    address provider;\\n    string lat;\\n    string lon;\\n    string name;\\n    string description;\\n    uint256 riskNumerator;\\n    uint256 riskDenominator;\\n  }\\n  mapping(uint256 => Insurance) public insurances;\\n  mapping(uint256 => mapping(address => uint256)) public liquidityperlp;\\n  mapping(address => mapping(uint256 => bool)) private clientinsured;\\n  mapping(uint256 => address[]) private insuranceProviderInsurees;\\n  mapping(address => mapping(uint256 => uint)) insuredamount;\\n  mapping(uint256 => mapping(address => uint)) insuredpayout;\\n  uint256 public insuranceId;\\n  address[] private validators;\\n  uint256[] public insuranceIds;\\n  mapping(address => bool) private validatorAlreadyExists;\\n  event ContractAuthorized(address contractAddress);\\n  event ContractDeauthorized(address contractAddress);\\n  event InsuranceBought(address insuree, uint256 insuranceid);\\n  event InsuranceAdded(uint256 insuranceid);\\n  event ValidatorAdded(address validator);\\n  event InsuranceClaimed(address insuree, uint256 payout);\\n  // Custom error type\\n  error UnexpectedRequestID(bytes32 requestId);\\n\\n  // Event to log responses\\n  event Response(bytes32 indexed requestId, string character, bytes response, bytes err);\\n\\n  // Router address - Hardcoded for Sepolia\\n  // Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n  address router = 0xb83E47C2bC239B3bf370bc41e1459A34b41238D0;\\n\\n  // JavaScript source code\\n  // Fetch character name from the Star Wars API.\\n  // Documentation: https://swapi.info/people\\n  string source =\\n    \\\"const insuranceId = args[0];\\\"\\n    \\\"const insuranceType = args[1];\\\"\\n    \\\"const lat = args[2];\\\"\\n    \\\"const lon = args[3];\\\"\\n    \\\"const afterTs = args[4];\\\"\\n    \\\"const beforeTs = args[5];\\\"\\n    \\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\n    \\\"url: `https://swapi.info/api/insurance/${insuranceId}?type=${insuranceType}&lat=${lat}&lon=${lon}&after=${afterTs}&before=${beforeTs}`\\\"\\n    \\\"});\\\"\\n    \\\"if (apiResponse.error) {\\\"\\n    \\\"throw Error('Request failed');\\\"\\n    \\\"}\\\"\\n    \\\"const { data } = apiResponse;\\\"\\n    \\\"return Functions.encodeString(data.result+data.job_id);\\\";\\n\\n  //Callback gas limit\\n  uint32 gasLimit = 300000;\\n\\n  // donID - Hardcoded for Sepolia\\n  // Check to get the donID for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n  bytes32 donID = 0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000;\\n\\n  // State variable to store the returned character information\\n  string public character;\\n  /// @dev This allows us to use our hashToField function on bytes\\n  using ByteHasher for bytes;\\n\\n  /// @notice Thrown when attempting to reuse a nullifier\\n  error InvalidNullifier();\\n\\n  /// @dev The address of the World ID Router contract that will be used for verifying proofs\\n  IWorldID internal immutable worldId;\\n\\n  /// @dev The keccak256 hash of the externalNullifier (unique identifier of the action performed), combination of appId and action\\n  uint256 internal immutable externalNullifierHash;\\n\\n  /// @dev The World ID group ID (1 for Orb-verified)\\n  uint256 internal immutable groupId;\\n\\n  /// @dev Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person\\n  mapping(uint256 => bool) internal nullifierHashes;\\n  /********************************************************************************************/\\n  /*                                       EVENT DEFINITIONS                                  */\\n  /********************************************************************************************/\\n\\n  /**\\n   * @dev Constructor\\n   *      initialize global variable for insurance ids\\n   */\\n\\n  constructor(\\n    IWorldID _worldId,\\n    string memory _appId,\\n    string memory _action\\n  ) FunctionsClient(router) ConfirmedOwner(msg.sender) {\\n    contractOwner = msg.sender;\\n    insuranceId = 0;\\n    worldId = _worldId;\\n    groupId = 1;\\n    externalNullifierHash = abi.encodePacked(abi.encodePacked(_appId).hashToField(), _action).hashToField();\\n  }\\n\\n  /**\\n   * @dev Modifier that requires the \\\"ContractOwner\\\" account to be the function caller\\n   */\\n  modifier requireContractOwner() {\\n    require(msg.sender == contractOwner, \\\"Caller is not contract owner\\\");\\n    _;\\n  }\\n\\n  modifier requireIsCallerInsuranceRegistered(address caller) {\\n    require(registeredInsuranceProvider[caller] == true, \\\"Caller not registered\\\");\\n    _;\\n  }\\n\\n  /********************************************************************************************/\\n  /*                                       UTILITY FUNCTIONS                                  */\\n  /********************************************************************************************/\\n\\n  function isNotInsured(uint256 insuranceid) external view returns (bool) {\\n    uint amount = insuredamount[msg.sender][insuranceid];\\n    return (amount == 0);\\n  }\\n\\n  function isInsuranceProviderRegistered(address registeredInsuranceProviderAddress) public view returns (bool) {\\n    return registeredInsuranceProvider[registeredInsuranceProviderAddress];\\n  }\\n  function numOfInsuranceProviders() public view returns (uint count) {\\n    return providers.length;\\n  }\\n\\n  /********************************************************************************************/\\n  /*                                     SMART CONTRACT FUNCTIONS                             */\\n  /********************************************************************************************/\\n  /**\\n   * @dev Add an insurance to the registration queue\\n   *      Can only be called from InsuranceApp contract\\n   *\\n   */\\n  function registerInsuranceProvider(address _provider) external returns (bool successfulRegistration) {\\n    registeredInsuranceProvider[_provider] = true;\\n    successfulRegistration = true;\\n    providers.push(_provider);\\n    return successfulRegistration;\\n  }\\n  /**\\n   * @dev Register insurance by provising all required fields. The caller should be an insurance provider\\n   */\\n  function registerInsurance(\\n    string calldata _insuranceName,\\n    uint256 _start,\\n    uint256 _end,\\n    TypeOfInsurance _typeOfIns,\\n    string calldata _lat,\\n    string calldata _lon,\\n    string calldata _description,\\n    uint256 _riskNumerator,\\n    uint256 _riskDenominator\\n  ) external payable returns (uint256) {\\n    require(msg.value > 0, \\\"The insurance provider should fund the insurance\\\");\\n    insurances[insuranceId] = Insurance({\\n      isRegistered: true,\\n      start: _start,\\n      end: _end,\\n      provider: msg.sender,\\n      lat: _lat,\\n      lon: _lon,\\n      typeOfIns: _typeOfIns,\\n      name: _insuranceName,\\n      description: _description,\\n      riskNumerator: _riskNumerator,\\n      riskDenominator: _riskDenominator\\n    });\\n    insurancelps[insuranceId].push(msg.sender);\\n    insuranceIds.push(insuranceId);\\n    insuranceliquidity[insuranceId] = msg.value;\\n    liquidityperlp[insuranceId][msg.sender] = msg.value;\\n    emit InsuranceAdded(insuranceId);\\n    insuranceId++;\\n    return insuranceId;\\n  }\\n\\n  /**\\n   * @dev to register a validator.\\n   */\\n  function registerValidator() external {\\n    require(!validatorAlreadyExists[msg.sender], \\\"Validator is already registered\\\");\\n    validators.push(msg.sender);\\n    emit ValidatorAdded(msg.sender);\\n  }\\n  function getInsuranceProviders() external view returns (address[] memory) {\\n    return providers;\\n  }\\n\\n  function getFundedInsuranceProviders() external view returns (address[] memory) {\\n    return alreadyFundedInsuranceProviders;\\n  }\\n\\n  /**\\n   * @dev liquidity providers can deposit funds in any amount to support any insurance\\n   */\\n  function fundInsurance(uint256 insuranceid) public payable returns (uint) {\\n    require(\\n      !hasProvidedLiquidity[insuranceid][msg.sender],\\n      \\\"The liquidity provider has already provisioned liquidity for this insurance\\\"\\n    );\\n    hasProvidedLiquidity[insuranceid][msg.sender] = true;\\n    numliquidityproviders[insuranceid]++;\\n    insuranceliquidity[insuranceid] = insuranceliquidity[insuranceid] + msg.value;\\n    insurancelps[insuranceid].push(msg.sender);\\n    liquidityperlp[insuranceid][msg.sender] = msg.value;\\n    return insuranceid;\\n  }\\n\\n  /**\\n   * @dev to see how much fund an insurance is supported with\\n   */\\n  function getInsuranceFunds(uint256 insuranceid) external view returns (uint256) {\\n    return insuranceliquidity[insuranceid];\\n  }\\n  /**\\n   * @dev Buy weather insurance.\\n   *\\n   */\\n\\n  function buy(uint256 insuranceid) external payable {\\n    require(!clientinsured[msg.sender][insuranceid], \\\"The client has already taken this type of insurance\\\");\\n    require(msg.value > 0, \\\"The client should send ETH to buy insurance\\\");\\n    uint256 temppayout = msg.value * insurances[insuranceid].riskDenominator;\\n    require(temppayout <= insuranceliquidity[insuranceid], \\\"You should buy with less ETH\\\");\\n    require(insuranceliquidity[insuranceid]>0, \\\"Liquidity does not exist for this insurance\\\");\\n    claimablePayout[msg.sender][insuranceid] = temppayout;\\n    clientinsured[msg.sender][insuranceid] = true;\\n    insuranceProviderInsurees[insuranceid].push(msg.sender);\\n    insuredamount[msg.sender][insuranceid] = msg.value;\\n    for (uint256 i = 0; i < insurancelps[insuranceid].length; i++) {\\n      uint256 insTotalLp = insuranceliquidity[insuranceid];\\n      uint256 currLp = liquidityperlp[insuranceid][insurancelps[insuranceid][i]] * 10**18;\\n\\n      uint lpperc = ((currLp / insTotalLp) * 100);\\n      uint lpamount = (lpperc * msg.value / 100) / 10**18;\\n      payable(insurancelps[insuranceid][i]).transfer(lpamount);\\n    }\\n    emit InsuranceBought(msg.sender, insuranceid);\\n    insuredpayout[insuranceid][msg.sender] = 0;\\n  }\\n\\n  /**\\n   *  @dev Transfers eligible payout funds to insuree\\n   *\\n   */\\n  function payout(uint256 insuranceid, address insuree) external returns (uint) {\\n    require(insuredpayout[insuranceid][insuree] == 0, \\\"The client has already claimed payout\\\");\\n    uint insureepayout = claimablePayout[insuree][insuranceid];\\n    payable(insuree).transfer(insureepayout);\\n    insuredpayout[insuranceid][insuree] = insureepayout;\\n    emit InsuranceClaimed(insuree, insureepayout);\\n    return insureepayout;\\n  }\\n\\n  /**\\n   *  @dev Claim insurance\\n   *\\n   */\\n  function claimInsurancePayout(uint256 insuranceid) external returns (bytes32) {\\n    Insurance memory instance = insurances[insuranceid];\\n    require(clientinsured[msg.sender][insuranceid], \\\"Client does not have insurance\\\");\\n    string[] memory args = new string[](6);\\n    args[0] = Strings.toString(insuranceid);\\n    args[1] = Strings.toString(uint256(instance.typeOfIns));\\n    args[2] = instance.lat;\\n    args[3] = instance.lon;\\n    args[4] = Strings.toString(instance.start);\\n    args[5] = Strings.toString(instance.end);\\n    FunctionsRequest.Request memory req;\\n    req.initializeRequestForInlineJavaScript(source); // Initialize the request with JS code\\n    if (args.length > 0) req.setArgs(args); // Set the arguments for the request\\n\\n    // Send the request and store the request ID\\n    s_lastRequestId = _sendRequest(req.encodeCBOR(), uint64(3217), gasLimit, donID);\\n\\n    return s_lastRequestId;\\n  }\\n  /**\\n   * @notice Sends an HTTP request for character information\\n   * @param subscriptionId The ID for the Chainlink subscription\\n   * @param args The arguments to pass to the HTTP request\\n   * @return requestId The ID of the request\\n   */\\n  function sendRequest(uint64 subscriptionId, string[] calldata args) internal returns (bytes32 requestId) {\\n    \\n  }\\n\\n  /**\\n   * @notice Callback function for fulfilling a request\\n   * @param requestId The ID of the request to fulfill\\n   * @param response The HTTP response data\\n   * @param err Any errors from the Functions request\\n   */\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal override {\\n    if (s_lastRequestId != requestId) {\\n      revert UnexpectedRequestID(requestId); // Check if request IDs match\\n    }\\n    // Update the contract's state variables with the response and any errors\\n    s_lastResponse = response;\\n    character = string(response);\\n    s_lastError = err;\\n\\n    // Emit an event to log the response\\n    emit Response(requestId, character, s_lastResponse, s_lastError);\\n  }\\n\\n  /**\\n   * @dev Fallback functions when retrieving ether.\\n   *\\n   */\\n  // Function to receive Ether. msg.data must be empty\\n  receive() external payable {}\\n\\n  // Fallback function is called when msg.data is not empty\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x92d14caf5c17b287ef915fe1b7a91f19a3698aca6c03d94e08ec4edf34fcec4b\",\"license\":\"UNLICENSED\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\nlibrary ByteHasher {\\n  /// @dev Creates a keccak256 hash of a bytestring.\\n  /// @param value The bytestring to hash\\n  /// @return The hash of the specified value\\n  /// @dev `>> 8` makes sure that the result is included in our field\\n  function hashToField(bytes memory value) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n  }\\n}\\n\",\"keccak256\":\"0x7765b7c43505ae5a5adefaf6e97bdea2fbb5c4517b24fd04afe88797320fa63d\",\"license\":\"MIT\"},\"contracts/interfaces/IWorldID.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\ninterface IWorldID {\\n  /// @notice Reverts if the zero-knowledge proof is invalid.\\n  /// @param root The of the Merkle tree\\n  /// @param groupId The id of the Semaphore group\\n  /// @param signalHash A keccak256 hash of the Semaphore signal\\n  /// @param nullifierHash The nullifier hash\\n  /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n  /// @param proof The zero-knowledge proof\\n  /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n  function verifyProof(\\n    uint256 root,\\n    uint256 groupId,\\n    uint256 signalHash,\\n    uint256 nullifierHash,\\n    uint256 externalNullifierHash,\\n    uint256[8] calldata proof\\n  ) external view;\\n}\\n\",\"keccak256\":\"0x1fda8d3ac22fe71b6b140835778fc26a1491aef00345202e446243929f50d64a\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610100604081815234620004d357620042c08038038091620000228286620004d8565b8439820191606081840312620004d35780516001600160a01b03939091908483168303620004d35760208281015190926001600160401b03929091838111620004d357816200007391840162000537565b9286830151908111620004d3576200008c920162000537565b9260185495861660805233156200048f57600080546001600160a01b03199081163317825596871673b83e47c2bc239b3bf370bc41e1459a34b41238d017601855601954600181811c98918116801562000484575b868a1014620004705788601f899a999899116200042c575b87620003f98a620003c6838b620003cc8c8c8c8c6103b9601955601982527f6e6728646174612e726573756c742b646174612e6a6f625f6964293b00000000600e8784207f636f6e737420696e737572616e63654964203d20617267735b305d3b636f6e7381557f7420696e737572616e636554797065203d20617267735b315d3b636f6e73742060018201557f6c6174203d20617267735b325d3b636f6e7374206c6f6e203d20617267735b3360028201557f5d3b636f6e73742061667465725473203d20617267735b345d3b636f6e73742060038201557f6265666f72655473203d20617267735b355d3b636f6e7374206170695265737060048201557f6f6e7365203d2061776169742046756e6374696f6e732e6d616b65487474705260058201557f657175657374287b75726c3a206068747470733a2f2f73776170692e696e666f60068201557f2f6170692f696e737572616e63652f247b696e737572616e636549647d3f747960078201557f70653d247b696e737572616e6365547970657d266c61743d247b6c61747d266c60088201557f6f6e3d247b6c6f6e7d2661667465723d247b616674657254737d266265666f7260098201557f653d247b6265666f726554737d607d293b69662028617069526573706f6e7365600a8201557f2e6572726f7229207b7468726f77204572726f72282752657175657374206661600b8201557f696c656427293b7d636f6e7374207b2064617461207d203d2061706952657370600c8201557f6f6e73653b72657475726e2046756e6374696f6e732e656e636f646553747269600d8201550155620493e063ffffffff19601a541617601a557f66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000601b553390600554161760055560145560a052600160e052620003c683855183620003b8829551809285808601910162000512565b8101038084520182620004d8565b62000592565b825194859183830152620003e98151809285878601910162000512565b81010390810184520182620004d8565b60c05251613d049081620005bc823960805181818161037a01526130fb015260a05181505060c05181505060e051815050f35b60198452868420600f8101999897969594939291601f0160051c015b808a10620004605750819293949596979850620000f9565b838a55988101988a975062000448565b634e487b7160e01b83526022600452602483fd5b98607f1698620000e1565b845162461bcd60e51b815260048101849052601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000006044820152606490fd5b600080fd5b601f909101601f19168101906001600160401b03821190821017620004fc57604052565b634e487b7160e01b600052604160045260246000fd5b60005b838110620005265750506000910152565b818101518382015260200162000515565b81601f82011215620004d35780516001600160401b038111620004fc57604051926200056e601f8301601f191660200185620004d8565b81845260208284010111620004d3576200058f916020808501910162000512565b90565b604051620005b260208281620003b8818301968781519384920162000512565b51902060081c9056fe60806040526004361015610018575b361561001657005b005b60003560e01c80630ca761751461021357806315bef4501461020e5780631ffe7b8a1461020957806321241418146102045780632f8ff3a2146101ff5780633944ea3a146101fa57806343060539146101f557806347709966146101f05780634b0795a8146101eb5780634d2e03a0146101e65780634d7fedfa146101e157806350f3fc81146101dc57806351ca570a146101d757806352ac183b146101d257806359fb49f9146101cd5780635acf77b0146101c857806369e88be7146101875780636de994c5146101c357806379ba5097146101be578063804b071a146101b957806383cb0c81146101b45780638da5cb5b146101af578063b1e21749146101aa578063b5bc78ed146101a5578063b6b1ccf0146101a0578063b8e12d4e1461019b578063bcc6587f14610196578063be95e01a14610191578063cfa29c441461018c578063d0beac3f14610187578063d96a094a146101825763f2fde38b0361000e57611ca2565b6119e7565b611266565b6119bb565b61184a565b6117a8565b611756565b6116fc565b6116ab565b61168d565b611666565b6115e2565b611440565b61134a565b611292565b611248565b6111b3565b610f37565b610efe565b610ea4565b610e3a565b610d54565b610b41565b610b02565b610aaf565b6109ca565b61079b565b61070b565b61060e565b610583565b610322565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761026357604052565b610218565b90601f601f19910116810190811067ffffffffffffffff82111761026357604052565b60405190610160820182811067ffffffffffffffff82111761026357604052565b67ffffffffffffffff811161026357601f01601f191660200190565b9291926102d4826102ac565b916102e26040519384610268565b8294818452818301116102ff578281602093846000960137010152565b600080fd5b9080601f830112156102ff5781602061031f933591016102c8565b90565b346102ff5760606003193601126102ff5760043567ffffffffffffffff6024358181116102ff57610357903690600401610304565b6044358281116102ff5761036f903690600401610304565b916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361052d5783600254036104fc578151908111610263576103c6816103c16003546107e3565b611e5f565b602080601f831160011461046f5750916103fe826104069361040b9695600091610464575b506000198260011b9260031b1c19161790565b600355611fa6565b61297a565b807f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b506040518061043a81612a5e565b0390a27f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b9050830151386103eb565b600360005290601f1983167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000905b8282106104e45750509261040b9594926001928261040696106104cb575b5050811b01600355611fa6565b84015160001960f88460031b161c1916905538806104be565b80600185968294968a015181550195019301906104a0565b602484604051907fd068bf5b0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b602435906001600160a01b03821682036102ff57565b600435906001600160a01b03821682036102ff57565b346102ff5760406003193601126102ff5760206105c86105a1610557565b600435600052600f83526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b9181601f840112156102ff5782359167ffffffffffffffff83116102ff57602083818601950101116102ff57565b6064359060038210156102ff57565b6101206003193601126102ff5767ffffffffffffffff6004358181116102ff5761063c9036906004016105d1565b6106479291926105ff565b926084358381116102ff576106609036906004016105d1565b9460a4358581116102ff576106799036906004016105d1565b9060c4359687116102ff576106c2976106996106b29836906004016105d1565b959094610104359860e4359860443591602435916123a9565b6040519081529081906020820190565b0390f35b602090602060408183019282815285518094520193019160005b8281106106ee575050505090565b83516001600160a01b0316855293810193928101926001016106e0565b346102ff5760006003193601126102ff57604051806008549182815260208091019260086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3916000905b82821061077b576106c28561076f81890382610268565b604051918291826106c6565b83546001600160a01b031686529485019460019384019390910190610758565b346102ff5760406003193601126102ff576001600160a01b036107bc61056d565b16600052600d60205260406000206024356000526020526020604060002054604051908152f35b90600182811c9216801561082c575b60208310146107fd57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916107f2565b60035460009291610846826107e3565b808252916020906001908181169081156108c55750600114610869575b50505050565b9293945060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000935b8585106108b2575050506020925001019038808080610863565b8054858501840152938201938101610898565b915050602094955060ff1991509291921683830152151560051b01019038808080610863565b600454600092916108fb826107e3565b808252916020906001908181169081156108c5575060011461091d5750505050565b9293945060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000935b858510610966575050506020925001019038808080610863565b805485850184015293820193810161094c565b919082519283825260005b8481106109a5575050601f19601f8460006020809697860101520116010190565b602081830181015184830182015201610984565b90602061031f928181520190610979565b346102ff57600080600319360112610aac576040519080600354906109ee826107e3565b80855291602091600191828116908115610a7f5750600114610a27575b6106c286610a1b81880382610268565b604051918291826109b9565b9350600384527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610a6c57505050508101602001610a1b826106c238610a0b565b8054868601840152938201938101610a4f565b8796506106c297945060209350610a1b95925060ff1991501682840152151560051b820101929338610a0b565b80fd5b346102ff5760406003193601126102ff57602060ff610af6610acf610557565b600435600052600c84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b346102ff5760206003193601126102ff576001600160a01b03610b2361056d565b166000526006602052602060ff604060002054166040519015158152f35b346102ff57600080600319360112610aac57604051908060045490610b65826107e3565b80855291602091600191828116908115610a7f5750600114610b91576106c286610a1b81880382610268565b9350600484527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b838510610bd657505050508101602001610a1b826106c238610a0b565b8054868601840152938201938101610bb9565b6040519060008260195491610bfd836107e3565b80835292602090600190818116908115610c8b5750600114610c2a575b5050610c2892500383610268565b565b91509260196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695936000925b828410610c735750610c289450505081016020013880610c1a565b85548885018301529485019487945092810192610c58565b905060209350610c2895925060ff1991501682840152151560051b8201013880610c1a565b90604051918260008254610cc3816107e3565b90818452602094600191600181169081600014610d315750600114610cf2575b505050610c2892500383610268565b600090815285812095935091905b818310610d19575050610c289350820101388080610ce3565b85548884018501529485019487945091830191610d00565b915050610c2895935060ff1991501682840152151560051b820101388080610ce3565b346102ff57600080600319360112610aac57604051908082601c5491610d79836107e3565b9283835260209460019186600182169182600014610e17575050600114610dbd575b5050610da992500383610268565b6106c2604051928284938452830190610979565b90859250601c82527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2115b858310610dff575050610da993508201013880610d9b565b80548389018501528794508693909201918101610de7565b91509350610da995925060ff1991501682840152151560051b8201013880610d9b565b346102ff5760006003193601126102ff576020600754604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8054821015610e9f5760005260206000200190600090565b610e58565b346102ff5760206003193601126102ff576004356007548110156102ff576001600160a01b0360209160076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015416604051908152f35b346102ff5760206003193601126102ff573360005260126020526040600020600435600052602052602060406000205415604051908152f35b60206003193601126102ff5760043580600052600c60205260ff610f716040600020336001600160a01b0316600052602052604060002090565b5416611056576106c290610fbb610fae33610f9684600052600c602052604060002090565b906001600160a01b0316600052602052604060002090565b600160ff19825416179055565b610fcf816000526009602052604060002090565b610fd98154612395565b9055610ffa610ff282600052600b602052604060002090565b543490612521565b61100e82600052600b602052604060002090565b5561102c3361102783600052600a602052604060002090565b6122d8565b3461104533610f9684600052600f602052604060002090565b556040519081529081906020820190565b60a460405162461bcd60e51b815260206004820152604b60248201527f546865206c69717569646974792070726f76696465722068617320616c72656160448201527f64792070726f766973696f6e6564206c697175696469747920666f722074686960648201527f7320696e737572616e63650000000000000000000000000000000000000000006084820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003111561111f57565b6110e6565b97939561117d916001600160a01b03611199979c9e9d9c6101409c9961118b9760408e6111a89e9961016097151582526020820152015261116481611115565b60608d01521660808b01528060a08b0152890190610979565b9087820360c0890152610979565b9085820360e0870152610979565b90838203610100850152610979565b946101208201520152565b346102ff5760206003193601126102ff57600435600052600e602052604060002060ff8154166106c260018301549160028401549360038101546111f960048301610cb0565b61120560058401610cb0565b61121160068501610cb0565b9161121e60078601610cb0565b9360096008870154960154966040519a8b9a60ff6001600160a01b038560081c169416928c611124565b346102ff5760006003193601126102ff576020601454604051908152f35b346102ff5760206003193601126102ff57600435600052600b6020526020604060002054604051908152f35b346102ff5760206003193601126102ff576001600160a01b036112b361056d565b168060005260066020526040600020600160ff1982541617905560075468010000000000000000811015610263576001810180600755811015610e9f5760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801907fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055602060405160018152f35b346102ff57600080600319360112610aac576001600160a01b03806001541633036113fc5781546001600160a01b0316600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055906113d27fffffffffffffffffffffffff000000000000000000000000000000000000000060015416600155565b3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b606460405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152fd5b346102ff5760206003193601126102ff576115c46115bf6115ad600435611572604061147e61147984600052600e602052604060002090565b61252e565b6114c06114bb6114b4866114a5336001600160a01b03166000526010602052604060002090565b90600052602052604060002090565b5460ff1690565b6125f2565b6114d16114cb61263d565b94612b73565b6114da85612680565b526114e484612680565b5061150460608201516114f681611115565b6114ff81611115565b612b73565b61150d8561268d565b526115178461268d565b5060a08101516115268561269d565b526115308461269d565b5060c081015161153f856126ad565b52611549846126ad565b506115576020820151612b73565b611560856126bd565b5261156a846126bd565b500151612b73565b61157b826126cd565b52611585816126cd565b5061158e6126f1565b906115a061159a610be9565b83613185565b80516115d2575b50612e94565b601a5463ffffffff16601b5491613089565b600255565b600254604051908152602090f35b6115dc9082612cc4565b386115a7565b346102ff5760006003193601126102ff57604051806007549182815260208091019260076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000905b828210611646576106c28561076f81890382610268565b83546001600160a01b03168652948501946001938401939091019061162f565b346102ff5760006003193601126102ff5760206001600160a01b0360005416604051908152f35b346102ff5760006003193601126102ff576020600254604051908152f35b346102ff5760206003193601126102ff576004356016548110156102ff5760209060166000527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890154604051908152f35b346102ff5760206003193601126102ff576004356008548110156102ff576001600160a01b0360209160086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015416604051908152f35b346102ff5760406003193601126102ff57602435600435600052600a60205260406000209081548110156102ff576117986001600160a01b0391602093610e87565b9190546040519260031b1c168152f35b346102ff57600080600319360112610aac57338152601760205260ff604082205416611806576117d73361225a565b6040513381527fe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec388498790602090a180f35b606460405162461bcd60e51b815260206004820152601f60248201527f56616c696461746f7220697320616c72656164792072656769737465726564006044820152fd5b346102ff5760406003193601126102ff57600435611866610557565b60009082825260136020526118918160408420906001600160a01b0316600052602052604060002090565b54611951576118b7836114a5836001600160a01b0316600052600d602052604060002090565b54918083818115611948575b829182916001600160a01b03871690f115611943578181816119177fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a94610f966106c2986000526013602052604060002090565b55604080516001600160a01b039290921682526020820192909252a16040519081529081906020820190565b61273b565b506108fc6118c3565b608460405162461bcd60e51b815260206004820152602560248201527f54686520636c69656e742068617320616c726561647920636c61696d6564207060448201527f61796f75740000000000000000000000000000000000000000000000000000006064820152fd5b346102ff5760206003193601126102ff5760043560005260096020526020604060002054604051908152f35b60206003193601126102ff57600435611a29611a24611a206114b4846114a5336001600160a01b03166000526010602052604060002090565b1590565b612747565b611a343415156127b8565b611a556009611a4d83600052600e602052604060002090565b015434612872565b611a75611a6c83600052600b602052604060002090565b54821115612885565b611a94611a8c83600052600b602052604060002090565b5415156128d0565b611ab5826114a5336001600160a01b0316600052600d602052604060002090565b55611ada610fae826114a5336001600160a01b03166000526010602052604060002090565b611af233611027836000526011602052604060002090565b34611b14826114a5336001600160a01b03166000526012602052604060002090565b5560005b611b2c82600052600a602052604060002090565b54811015611c50576000808080611bf1611be3611bdc611bb0611bd7611bd28a611bcd611bc78e611b99611b6a82600052600b602052604060002090565b5494611b94611b8384600052600f602052604060002090565b93600052600a602052604060002090565b610e87565b9790973498546001600160a01b039160031b1c1690565b6001600160a01b0316600052602052604060002090565b54612829565b612941565b612846565b612872565b6064900490565b670de0b6b3a7640000900490565b611c31611c25611c25611c1289611b948c600052600a602052604060002090565b90546001600160a01b039160031b1c1690565b6001600160a01b031690565b828215611c47575bf11561194357600101611b18565b506108fc611c39565b6040805133815260208101849052600091611c9f9185917fb54ae6df4548fec2c87618979584a234918d0b316ae59007568ff6be22d7a0bc91a1610f9633916000526013602052604060002090565b55005b346102ff5760206003193601126102ff57611cbb61056d565b6001600160a01b03806000541691823303611d6e571690338214611d2a57817fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001557fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278600080a3005b606460405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152fd5b15611db957565b608460405162461bcd60e51b815260206004820152603060248201527f54686520696e737572616e63652070726f76696465722073686f756c6420667560448201527f6e642074686520696e737572616e6365000000000000000000000000000000006064820152fd5b611e2c82611115565b52565b90611e3981611115565b60ff60ff198354169116179055565b818110611e53575050565b60008155600101611e48565b90601f8211611e6c575050565b610c289160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906020601f840160051c83019310611eb6575b601f0160051c0190611e48565b9091508190611ea9565b90601f8211611ecd575050565b610c2891601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211906020601f840160051c83019310611eb657601f0160051c0190611e48565b90601f8211611f23575050565b610c289160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906020601f840160051c83019310611eb657601f0160051c0190611e48565b9190601f8111611f7b57505050565b610c28926000526020600020906020601f840160051c83019310611eb657601f0160051c0190611e48565b90815167ffffffffffffffff811161026357611fcc81611fc7601c546107e3565b611ec0565b602080601f831160011461200e57508190611ffe9394600092612003575b50506000198260011b9260031b1c19161790565b601c55565b015190503880611fea565b90601f19831694612041601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21190565b926000905b87821061207e575050836001959610612065575b505050811b01601c55565b015160001960f88460031b161c1916905538808061205a565b80600185968294968601518155019501930190612046565b919091825167ffffffffffffffff8111610263576120be816120b884546107e3565b84611f6c565b602080601f83116001146120f4575081906120f09394956000926120035750506000198260011b9260031b1c19161790565b9055565b90601f1983169561210a85600052602060002090565b926000905b8882106121475750508360019596971061212e575b505050811b019055565b015160001960f88460031b161c19169055388080612124565b8060018596829496860151815501950193019061210f565b906101406009916121866121738251151590565b859060ff60ff1983541691151516179055565b6020810151600185015560408101516002850155612203600385016121b860608401516121b281611115565b82611e2f565b608083015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1660089190911b74ffffffffffffffffffffffffffffffffffffffff0016179055565b61221460a082015160048601612096565b61222560c082015160058601612096565b61223660e082015160068601612096565b61224861010082015160078601612096565b61012081015160088501550151910155565b60155468010000000000000000811015610263576001810180601555811015610e9f576001600160a01b039060156000527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b805468010000000000000000811015610263576122fa91600182018155610e87565b6001600160a01b039291928084549260031b9316831b921b1916179055565b60165468010000000000000000811015610263576001810180601655811015610e9f5760166000527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890155565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60001981146123a45760010190565b612366565b9694929b9a9997939095919b3415156123c190611db2565b6123c961028b565b600181529c8d6020015260408d01526123e59060608d01611e23565b3360808c015236906123f6926102c8565b60a08a01523690612406926102c8565b60c08801523690612416926102c8565b60e08601523690612426926102c8565b610100840152610120830152610140820152601490815461245190600052600e602052604060002090565b9061245b9161215f565b33815461247290600052600a602052604060002090565b9061247c916122d8565b805461248790612319565b34815461249e90600052600b602052604060002090565b55343382546124b790600052600f602052604060002090565b906124d491906001600160a01b0316600052602052604060002090565b5580546040518181527fa1467d518e9fa2c94583b5b96dc6d322c27e6ddfbbc24450b818b91c909046a690602090a161250c90612395565b6014555490565b90602082018092116123a457565b919082018092116123a457565b90600961253961028b565b9261254e612548825460ff1690565b15158552565b60018101546020850152600281015460408501526125986001600160a01b03600383015461258260ff821660608901611e23565b60081c1660808601906001600160a01b03169052565b6125a460048201610cb0565b60a08501526125b560058201610cb0565b60c08501526125c660068201610cb0565b60e08501526125d760078201610cb0565b61010085015260088101546101208501520154610140830152565b156125f957565b606460405162461bcd60e51b815260206004820152601e60248201527f436c69656e7420646f6573206e6f74206861766520696e737572616e636500006044820152fd5b6040519060e0820182811067ffffffffffffffff82111761026357604052600682528160005b60c0811061266f575050565b806060602080938501015201612663565b805115610e9f5760200190565b805160011015610e9f5760400190565b805160021015610e9f5760600190565b805160031015610e9f5760800190565b805160041015610e9f5760a00190565b805160051015610e9f5760c00190565b8051821015610e9f5760209160051b010190565b6040519060e0820182811067ffffffffffffffff82111761026357604052606060c08360008152600060208201526000604082015282808201528260808201528260a08201520152565b6040513d6000823e3d90fd5b1561274e57565b608460405162461bcd60e51b815260206004820152603360248201527f54686520636c69656e742068617320616c72656164792074616b656e2074686960448201527f732074797065206f6620696e737572616e6365000000000000000000000000006064820152fd5b156127bf57565b608460405162461bcd60e51b815260206004820152602b60248201527f54686520636c69656e742073686f756c642073656e642045544820746f20627560448201527f7920696e737572616e63650000000000000000000000000000000000000000006064820152fd5b90670de0b6b3a7640000918281029281840414901517156123a457565b906064820291808304606414901517156123a457565b908160011b91808304600214901517156123a457565b818102929181159184041417156123a457565b1561288c57565b606460405162461bcd60e51b815260206004820152601c60248201527f596f752073686f756c64206275792077697468206c65737320455448000000006044820152fd5b156128d757565b608460405162461bcd60e51b815260206004820152602b60248201527f4c697175696469747920646f6573206e6f7420657869737420666f722074686960448201527f7320696e737572616e63650000000000000000000000000000000000000000006064820152fd5b811561294b570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b90815167ffffffffffffffff8111610263576129a08161299b6004546107e3565b611f16565b602080601f83116001146129d6575081906129d193946000926120035750506000198260011b9260031b1c19161790565b600455565b90601f19831694612a0960046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90565b926000905b878210612a46575050836001959610612a2d575b505050811b01600455565b015160001960f88460031b161c19169055388080612a22565b80600185968294968601518155019501930190612a0e565b9060608252600091601c54612a72816107e3565b806060840152608091600190600181169081600014612b185750600114612aba575b505050612aac838261031f9495036020840152610836565b9060408183039101526108eb565b601c600090815295507f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2115b828710612b03575050505091820160800191612aac61031f38612a94565b80548786018501526020909601958101612ae5565b61031f969750612aac9450608093925060ff1991501682850152151560051b830101939238612a94565b90612b4c826102ac565b612b596040519182610268565b828152601f19612b6982946102ac565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612cb6575b506d04ee2d6d415b85acef810000000080831015612ca7575b50662386f26fc1000080831015612c98575b506305f5e10080831015612c89575b5061271080831015612c7a575b506064821015612c6a575b600a80921015612c60575b600190816021612c0b60018701612b42565b95860101905b612c1d575b5050505090565b600019849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215612c5b57919082612c11565b612c16565b9160010191612bf9565b9190606460029104910191612bee565b60049193920491019138612be3565b60089193920491019138612bd6565b60109193920491019138612bc7565b60209193920491019138612bb5565b604093508104915038612b9c565b815115612cd15760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b60405190612d0882610247565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b60405190612d4182610247565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b6001111561111f57565b60405190612d8482610247565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b60405190612dbd82610247565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b60405190612df682610247565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b60405190612e2f82610247565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b60405190612e6882610247565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b612e9c6131e0565b90612eae612ea8612cfb565b83613230565b612ecb8151612ebc81611115565b612ec581611115565b836132f3565b612ed6612ea8612d34565b612ef06040820151612ee781612d6d565b612ec581612d6d565b612efb612ea8612d77565b612f09606082015183613230565b60a08101805151613021575b506080810190815151612f89575b60c0915001805151612f36575b50515190565b91612f42612ea8612e5b565b612f4b82613394565b60005b83518051821015612f765790612f70612f69826001946126dd565b51856134bc565b01612f4e565b50509150612f838161342f565b38612f30565b602081018051612f9881611115565b612fa181611115565b15612ff75760c092612fda612ff292612fc1612fbb612de9565b88613230565b51612fcb81611115565b612fd481611115565b866132f3565b612feb612fe5612e22565b86613230565b51846134bc565b612f23565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b9261303361302d612db0565b84613230565b61303c83613394565b60005b84518051821015613067579061306161305a826001946126dd565b5186613230565b0161303f565b505092506130748261342f565b38612f15565b908160209103126102ff575190565b6130da9060209263ffffffff9460405195869485947f461d2762000000000000000000000000000000000000000000000000000000008652610c91600487015260a0602487015260a4860190610979565b92600160448601521660648401526084830152038160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af190811561194357600091613156575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b613178915060203d60201161317e575b6131708183610268565b81019061307a565b3861312c565b503d613166565b81511561319c576000808252604082015260600152565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b604051906131d382610247565b6000602083606081520152565b6040516131ec81610247565b6131f46131c6565b80825260208201600081526132076131c6565b5061010060208301526040518092526000825261012082019182106102ff576000916040525290565b815161327592919067ffffffffffffffff81169060178211613278576132609150606060ff84519216179061398b565b505b519061326c6131c6565b50805191613c0b565b50565b5060ff811161329d576132979061328f8351613792565b508251613b97565b50613262565b61ffff81116132bc57613297906132b4835161372d565b508251613b0c565b63ffffffff81116132dd57613297906132d583516136c8565b508251613a81565b613297906132eb8351613658565b5082516139f6565b908151916132ff6131c6565b5082515160018101908181116123a4576020850151811015613358575b60c26020610c289651928301015380518211613350575b50506040519160208301526020825261334b82610247565b6134bc565b523880613333565b8160011b94828604600214831517156123a45760208161338a610c289861338360c295519184613541565b5082613593565b509650505061331c565b80519061339f6131c6565b5081515160018101908181116123a45760208401518110156133ed575b609f60208095519283010153805182116133e5575b505001805190600182018092116123a45752565b5238806133d1565b8160011b93828504600214831517156123a4576020816134168297613383609f95519184613541565b50955050506133bc565b90601f1982019182116123a457565b80519061343a6131c6565b5081515160018101908181116123a4576020840151811015613489575b60ff6020809551928301015380518211613481575b50500180519060001982019182116123a45752565b52388061346c565b8160011b93828504600214831517156123a4576020816134b2829761338360ff95519184613541565b5095505050613457565b815161327592919067ffffffffffffffff811690601782116134ec576132609150604060ff84519216179061398b565b5060ff8111613503576132979061328f8351613926565b61ffff811161351a57613297906132b483516138c1565b63ffffffff811161353357613297906132d5835161385c565b613297906132eb83516137f7565b9061354a6131c6565b50601f811680613579575b50806020830152604051908183526000825281016020019081106102ff5760405290565b602003602081116123a45781018091116123a45738613555565b9061359c6131c6565b508051906135a86131c6565b506135b68151831115613c04565b825151916135c48184612521565b60209260208601518211613641575b602091865183815197820101968211613639575b505001915b808210156136115750600019906020036101000a019081199051169082511617905290565b90919261362d6136276136339286518152612513565b94612513565b92613420565b906135ec565b5238806135e7565b61365361364d8361285c565b87613cb7565b6135d3565b6136606131c6565b5080515160018101908181116123a4576020830151811015613699575b607b6020845192830101538051821161369557505090565b5290565b8160011b828104600214831517156123a4576136c2906136bb85519186613541565b5084613593565b5061367d565b6136d06131c6565b5080515160018101908181116123a4576020830151811015613705575b607a6020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613727906136bb85519186613541565b506136ed565b6137356131c6565b5080515160018101908181116123a457602083015181101561376a575b60796020845192830101538051821161369557505090565b8160011b828104600214831517156123a45761378c906136bb85519186613541565b50613752565b61379a6131c6565b5080515160018101908181116123a45760208301518110156137cf575b60786020845192830101538051821161369557505090565b8160011b828104600214831517156123a4576137f1906136bb85519186613541565b506137b7565b6137ff6131c6565b5080515160018101908181116123a4576020830151811015613834575b605b6020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613856906136bb85519186613541565b5061381c565b6138646131c6565b5080515160018101908181116123a4576020830151811015613899575b605a6020845192830101538051821161369557505090565b8160011b828104600214831517156123a4576138bb906136bb85519186613541565b50613881565b6138c96131c6565b5080515160018101908181116123a45760208301518110156138fe575b60596020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613920906136bb85519186613541565b506138e6565b61392e6131c6565b5080515160018101908181116123a4576020830151811015613963575b60586020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613985906136bb85519186613541565b5061394b565b906139946131c6565b5081515160018101918282116123a45760208401518210156139c7575b6020845192830101538051821161369557505090565b8260011b838104600214841517156123a4576139f0906139e986519187613541565b5085613593565b506139b1565b906139ff6131c6565b508151518060080191826008116123a45760208401518311613a59575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008251161790528051821161369557505090565b8260011b838104600214841517156123a457613a7b906139e986519187613541565b50613a1c565b90613a8a6131c6565b508151518060040191826004116123a45760208401518311613ae4575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008251161790528051821161369557505090565b8260011b838104600214841517156123a457613b06906139e986519187613541565b50613aa7565b90613b156131c6565b508151518060020191826002116123a45760208401518311613b6f575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008251161790528051821161369557505090565b8260011b838104600214841517156123a457613b91906139e986519187613541565b50613b32565b90613ba06131c6565b508151518060010191826001116123a45760208401518311613bdc575b60018451928301019060ff198251161790528051821161369557505090565b8260011b838104600214841517156123a457613bfe906139e986519187613541565b50613bbd565b156102ff57565b9190613c156131c6565b50613c238151831115613c04565b825151916020613c338285612521565b928193828701518111613ca0575b865183815197820101968211613c98575b505001915b80821015613c7c5750600019906020036101000a019081199051169082511617905290565b90919261362d613627613c929286518152612513565b90613c57565b523880613c52565b613cb2613cac8261285c565b88613cb7565b613c41565b9061327591613cc881519282613541565b5061359356fea26469706673582212204971d1326488b660aab75aba6e844e5ae4c3bc970b74aff4284f50b6b8b73b8964736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361015610018575b361561001657005b005b60003560e01c80630ca761751461021357806315bef4501461020e5780631ffe7b8a1461020957806321241418146102045780632f8ff3a2146101ff5780633944ea3a146101fa57806343060539146101f557806347709966146101f05780634b0795a8146101eb5780634d2e03a0146101e65780634d7fedfa146101e157806350f3fc81146101dc57806351ca570a146101d757806352ac183b146101d257806359fb49f9146101cd5780635acf77b0146101c857806369e88be7146101875780636de994c5146101c357806379ba5097146101be578063804b071a146101b957806383cb0c81146101b45780638da5cb5b146101af578063b1e21749146101aa578063b5bc78ed146101a5578063b6b1ccf0146101a0578063b8e12d4e1461019b578063bcc6587f14610196578063be95e01a14610191578063cfa29c441461018c578063d0beac3f14610187578063d96a094a146101825763f2fde38b0361000e57611ca2565b6119e7565b611266565b6119bb565b61184a565b6117a8565b611756565b6116fc565b6116ab565b61168d565b611666565b6115e2565b611440565b61134a565b611292565b611248565b6111b3565b610f37565b610efe565b610ea4565b610e3a565b610d54565b610b41565b610b02565b610aaf565b6109ca565b61079b565b61070b565b61060e565b610583565b610322565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761026357604052565b610218565b90601f601f19910116810190811067ffffffffffffffff82111761026357604052565b60405190610160820182811067ffffffffffffffff82111761026357604052565b67ffffffffffffffff811161026357601f01601f191660200190565b9291926102d4826102ac565b916102e26040519384610268565b8294818452818301116102ff578281602093846000960137010152565b600080fd5b9080601f830112156102ff5781602061031f933591016102c8565b90565b346102ff5760606003193601126102ff5760043567ffffffffffffffff6024358181116102ff57610357903690600401610304565b6044358281116102ff5761036f903690600401610304565b916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016330361052d5783600254036104fc578151908111610263576103c6816103c16003546107e3565b611e5f565b602080601f831160011461046f5750916103fe826104069361040b9695600091610464575b506000198260011b9260031b1c19161790565b600355611fa6565b61297a565b807f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b506040518061043a81612a5e565b0390a27f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6600080a2005b9050830151386103eb565b600360005290601f1983167fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000905b8282106104e45750509261040b9594926001928261040696106104cb575b5050811b01600355611fa6565b84015160001960f88460031b161c1916905538806104be565b80600185968294968a015181550195019301906104a0565b602484604051907fd068bf5b0000000000000000000000000000000000000000000000000000000082526004820152fd5b60046040517fc6829f83000000000000000000000000000000000000000000000000000000008152fd5b602435906001600160a01b03821682036102ff57565b600435906001600160a01b03821682036102ff57565b346102ff5760406003193601126102ff5760206105c86105a1610557565b600435600052600f83526040600020906001600160a01b0316600052602052604060002090565b54604051908152f35b9181601f840112156102ff5782359167ffffffffffffffff83116102ff57602083818601950101116102ff57565b6064359060038210156102ff57565b6101206003193601126102ff5767ffffffffffffffff6004358181116102ff5761063c9036906004016105d1565b6106479291926105ff565b926084358381116102ff576106609036906004016105d1565b9460a4358581116102ff576106799036906004016105d1565b9060c4359687116102ff576106c2976106996106b29836906004016105d1565b959094610104359860e4359860443591602435916123a9565b6040519081529081906020820190565b0390f35b602090602060408183019282815285518094520193019160005b8281106106ee575050505090565b83516001600160a01b0316855293810193928101926001016106e0565b346102ff5760006003193601126102ff57604051806008549182815260208091019260086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3916000905b82821061077b576106c28561076f81890382610268565b604051918291826106c6565b83546001600160a01b031686529485019460019384019390910190610758565b346102ff5760406003193601126102ff576001600160a01b036107bc61056d565b16600052600d60205260406000206024356000526020526020604060002054604051908152f35b90600182811c9216801561082c575b60208310146107fd57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b91607f16916107f2565b60035460009291610846826107e3565b808252916020906001908181169081156108c55750600114610869575b50505050565b9293945060036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b926000935b8585106108b2575050506020925001019038808080610863565b8054858501840152938201938101610898565b915050602094955060ff1991509291921683830152151560051b01019038808080610863565b600454600092916108fb826107e3565b808252916020906001908181169081156108c5575060011461091d5750505050565b9293945060046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b926000935b858510610966575050506020925001019038808080610863565b805485850184015293820193810161094c565b919082519283825260005b8481106109a5575050601f19601f8460006020809697860101520116010190565b602081830181015184830182015201610984565b90602061031f928181520190610979565b346102ff57600080600319360112610aac576040519080600354906109ee826107e3565b80855291602091600191828116908115610a7f5750600114610a27575b6106c286610a1b81880382610268565b604051918291826109b9565b9350600384527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610a6c57505050508101602001610a1b826106c238610a0b565b8054868601840152938201938101610a4f565b8796506106c297945060209350610a1b95925060ff1991501682840152151560051b820101929338610a0b565b80fd5b346102ff5760406003193601126102ff57602060ff610af6610acf610557565b600435600052600c84526040600020906001600160a01b0316600052602052604060002090565b54166040519015158152f35b346102ff5760206003193601126102ff576001600160a01b03610b2361056d565b166000526006602052602060ff604060002054166040519015158152f35b346102ff57600080600319360112610aac57604051908060045490610b65826107e3565b80855291602091600191828116908115610a7f5750600114610b91576106c286610a1b81880382610268565b9350600484527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b838510610bd657505050508101602001610a1b826106c238610a0b565b8054868601840152938201938101610bb9565b6040519060008260195491610bfd836107e3565b80835292602090600190818116908115610c8b5750600114610c2a575b5050610c2892500383610268565b565b91509260196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695936000925b828410610c735750610c289450505081016020013880610c1a565b85548885018301529485019487945092810192610c58565b905060209350610c2895925060ff1991501682840152151560051b8201013880610c1a565b90604051918260008254610cc3816107e3565b90818452602094600191600181169081600014610d315750600114610cf2575b505050610c2892500383610268565b600090815285812095935091905b818310610d19575050610c289350820101388080610ce3565b85548884018501529485019487945091830191610d00565b915050610c2895935060ff1991501682840152151560051b820101388080610ce3565b346102ff57600080600319360112610aac57604051908082601c5491610d79836107e3565b9283835260209460019186600182169182600014610e17575050600114610dbd575b5050610da992500383610268565b6106c2604051928284938452830190610979565b90859250601c82527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2115b858310610dff575050610da993508201013880610d9b565b80548389018501528794508693909201918101610de7565b91509350610da995925060ff1991501682840152151560051b8201013880610d9b565b346102ff5760006003193601126102ff576020600754604051908152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8054821015610e9f5760005260206000200190600090565b610e58565b346102ff5760206003193601126102ff576004356007548110156102ff576001600160a01b0360209160076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688015416604051908152f35b346102ff5760206003193601126102ff573360005260126020526040600020600435600052602052602060406000205415604051908152f35b60206003193601126102ff5760043580600052600c60205260ff610f716040600020336001600160a01b0316600052602052604060002090565b5416611056576106c290610fbb610fae33610f9684600052600c602052604060002090565b906001600160a01b0316600052602052604060002090565b600160ff19825416179055565b610fcf816000526009602052604060002090565b610fd98154612395565b9055610ffa610ff282600052600b602052604060002090565b543490612521565b61100e82600052600b602052604060002090565b5561102c3361102783600052600a602052604060002090565b6122d8565b3461104533610f9684600052600f602052604060002090565b556040519081529081906020820190565b60a460405162461bcd60e51b815260206004820152604b60248201527f546865206c69717569646974792070726f76696465722068617320616c72656160448201527f64792070726f766973696f6e6564206c697175696469747920666f722074686960648201527f7320696e737572616e63650000000000000000000000000000000000000000006084820152fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003111561111f57565b6110e6565b97939561117d916001600160a01b03611199979c9e9d9c6101409c9961118b9760408e6111a89e9961016097151582526020820152015261116481611115565b60608d01521660808b01528060a08b0152890190610979565b9087820360c0890152610979565b9085820360e0870152610979565b90838203610100850152610979565b946101208201520152565b346102ff5760206003193601126102ff57600435600052600e602052604060002060ff8154166106c260018301549160028401549360038101546111f960048301610cb0565b61120560058401610cb0565b61121160068501610cb0565b9161121e60078601610cb0565b9360096008870154960154966040519a8b9a60ff6001600160a01b038560081c169416928c611124565b346102ff5760006003193601126102ff576020601454604051908152f35b346102ff5760206003193601126102ff57600435600052600b6020526020604060002054604051908152f35b346102ff5760206003193601126102ff576001600160a01b036112b361056d565b168060005260066020526040600020600160ff1982541617905560075468010000000000000000811015610263576001810180600755811015610e9f5760076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801907fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055602060405160018152f35b346102ff57600080600319360112610aac576001600160a01b03806001541633036113fc5781546001600160a01b0316600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055906113d27fffffffffffffffffffffffff000000000000000000000000000000000000000060015416600155565b3391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b606460405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e6572000000000000000000006044820152fd5b346102ff5760206003193601126102ff576115c46115bf6115ad600435611572604061147e61147984600052600e602052604060002090565b61252e565b6114c06114bb6114b4866114a5336001600160a01b03166000526010602052604060002090565b90600052602052604060002090565b5460ff1690565b6125f2565b6114d16114cb61263d565b94612b73565b6114da85612680565b526114e484612680565b5061150460608201516114f681611115565b6114ff81611115565b612b73565b61150d8561268d565b526115178461268d565b5060a08101516115268561269d565b526115308461269d565b5060c081015161153f856126ad565b52611549846126ad565b506115576020820151612b73565b611560856126bd565b5261156a846126bd565b500151612b73565b61157b826126cd565b52611585816126cd565b5061158e6126f1565b906115a061159a610be9565b83613185565b80516115d2575b50612e94565b601a5463ffffffff16601b5491613089565b600255565b600254604051908152602090f35b6115dc9082612cc4565b386115a7565b346102ff5760006003193601126102ff57604051806007549182815260208091019260076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688916000905b828210611646576106c28561076f81890382610268565b83546001600160a01b03168652948501946001938401939091019061162f565b346102ff5760006003193601126102ff5760206001600160a01b0360005416604051908152f35b346102ff5760006003193601126102ff576020600254604051908152f35b346102ff5760206003193601126102ff576004356016548110156102ff5760209060166000527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890154604051908152f35b346102ff5760206003193601126102ff576004356008548110156102ff576001600160a01b0360209160086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3015416604051908152f35b346102ff5760406003193601126102ff57602435600435600052600a60205260406000209081548110156102ff576117986001600160a01b0391602093610e87565b9190546040519260031b1c168152f35b346102ff57600080600319360112610aac57338152601760205260ff604082205416611806576117d73361225a565b6040513381527fe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec388498790602090a180f35b606460405162461bcd60e51b815260206004820152601f60248201527f56616c696461746f7220697320616c72656164792072656769737465726564006044820152fd5b346102ff5760406003193601126102ff57600435611866610557565b60009082825260136020526118918160408420906001600160a01b0316600052602052604060002090565b54611951576118b7836114a5836001600160a01b0316600052600d602052604060002090565b54918083818115611948575b829182916001600160a01b03871690f115611943578181816119177fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a94610f966106c2986000526013602052604060002090565b55604080516001600160a01b039290921682526020820192909252a16040519081529081906020820190565b61273b565b506108fc6118c3565b608460405162461bcd60e51b815260206004820152602560248201527f54686520636c69656e742068617320616c726561647920636c61696d6564207060448201527f61796f75740000000000000000000000000000000000000000000000000000006064820152fd5b346102ff5760206003193601126102ff5760043560005260096020526020604060002054604051908152f35b60206003193601126102ff57600435611a29611a24611a206114b4846114a5336001600160a01b03166000526010602052604060002090565b1590565b612747565b611a343415156127b8565b611a556009611a4d83600052600e602052604060002090565b015434612872565b611a75611a6c83600052600b602052604060002090565b54821115612885565b611a94611a8c83600052600b602052604060002090565b5415156128d0565b611ab5826114a5336001600160a01b0316600052600d602052604060002090565b55611ada610fae826114a5336001600160a01b03166000526010602052604060002090565b611af233611027836000526011602052604060002090565b34611b14826114a5336001600160a01b03166000526012602052604060002090565b5560005b611b2c82600052600a602052604060002090565b54811015611c50576000808080611bf1611be3611bdc611bb0611bd7611bd28a611bcd611bc78e611b99611b6a82600052600b602052604060002090565b5494611b94611b8384600052600f602052604060002090565b93600052600a602052604060002090565b610e87565b9790973498546001600160a01b039160031b1c1690565b6001600160a01b0316600052602052604060002090565b54612829565b612941565b612846565b612872565b6064900490565b670de0b6b3a7640000900490565b611c31611c25611c25611c1289611b948c600052600a602052604060002090565b90546001600160a01b039160031b1c1690565b6001600160a01b031690565b828215611c47575bf11561194357600101611b18565b506108fc611c39565b6040805133815260208101849052600091611c9f9185917fb54ae6df4548fec2c87618979584a234918d0b316ae59007568ff6be22d7a0bc91a1610f9633916000526013602052604060002090565b55005b346102ff5760206003193601126102ff57611cbb61056d565b6001600160a01b03806000541691823303611d6e571690338214611d2a57817fffffffffffffffffffffffff000000000000000000000000000000000000000060015416176001557fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278600080a3005b606460405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152fd5b606460405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e6572000000000000000000006044820152fd5b15611db957565b608460405162461bcd60e51b815260206004820152603060248201527f54686520696e737572616e63652070726f76696465722073686f756c6420667560448201527f6e642074686520696e737572616e6365000000000000000000000000000000006064820152fd5b611e2c82611115565b52565b90611e3981611115565b60ff60ff198354169116179055565b818110611e53575050565b60008155600101611e48565b90601f8211611e6c575050565b610c289160036000527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b906020601f840160051c83019310611eb6575b601f0160051c0190611e48565b9091508190611ea9565b90601f8211611ecd575050565b610c2891601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a211906020601f840160051c83019310611eb657601f0160051c0190611e48565b90601f8211611f23575050565b610c289160046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b906020601f840160051c83019310611eb657601f0160051c0190611e48565b9190601f8111611f7b57505050565b610c28926000526020600020906020601f840160051c83019310611eb657601f0160051c0190611e48565b90815167ffffffffffffffff811161026357611fcc81611fc7601c546107e3565b611ec0565b602080601f831160011461200e57508190611ffe9394600092612003575b50506000198260011b9260031b1c19161790565b601c55565b015190503880611fea565b90601f19831694612041601c6000527f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a21190565b926000905b87821061207e575050836001959610612065575b505050811b01601c55565b015160001960f88460031b161c1916905538808061205a565b80600185968294968601518155019501930190612046565b919091825167ffffffffffffffff8111610263576120be816120b884546107e3565b84611f6c565b602080601f83116001146120f4575081906120f09394956000926120035750506000198260011b9260031b1c19161790565b9055565b90601f1983169561210a85600052602060002090565b926000905b8882106121475750508360019596971061212e575b505050811b019055565b015160001960f88460031b161c19169055388080612124565b8060018596829496860151815501950193019061210f565b906101406009916121866121738251151590565b859060ff60ff1983541691151516179055565b6020810151600185015560408101516002850155612203600385016121b860608401516121b281611115565b82611e2f565b608083015181547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1660089190911b74ffffffffffffffffffffffffffffffffffffffff0016179055565b61221460a082015160048601612096565b61222560c082015160058601612096565b61223660e082015160068601612096565b61224861010082015160078601612096565b61012081015160088501550151910155565b60155468010000000000000000811015610263576001810180601555811015610e9f576001600160a01b039060156000527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec4750191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b805468010000000000000000811015610263576122fa91600182018155610e87565b6001600160a01b039291928084549260031b9316831b921b1916179055565b60165468010000000000000000811015610263576001810180601655811015610e9f5760166000527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890155565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60001981146123a45760010190565b612366565b9694929b9a9997939095919b3415156123c190611db2565b6123c961028b565b600181529c8d6020015260408d01526123e59060608d01611e23565b3360808c015236906123f6926102c8565b60a08a01523690612406926102c8565b60c08801523690612416926102c8565b60e08601523690612426926102c8565b610100840152610120830152610140820152601490815461245190600052600e602052604060002090565b9061245b9161215f565b33815461247290600052600a602052604060002090565b9061247c916122d8565b805461248790612319565b34815461249e90600052600b602052604060002090565b55343382546124b790600052600f602052604060002090565b906124d491906001600160a01b0316600052602052604060002090565b5580546040518181527fa1467d518e9fa2c94583b5b96dc6d322c27e6ddfbbc24450b818b91c909046a690602090a161250c90612395565b6014555490565b90602082018092116123a457565b919082018092116123a457565b90600961253961028b565b9261254e612548825460ff1690565b15158552565b60018101546020850152600281015460408501526125986001600160a01b03600383015461258260ff821660608901611e23565b60081c1660808601906001600160a01b03169052565b6125a460048201610cb0565b60a08501526125b560058201610cb0565b60c08501526125c660068201610cb0565b60e08501526125d760078201610cb0565b61010085015260088101546101208501520154610140830152565b156125f957565b606460405162461bcd60e51b815260206004820152601e60248201527f436c69656e7420646f6573206e6f74206861766520696e737572616e636500006044820152fd5b6040519060e0820182811067ffffffffffffffff82111761026357604052600682528160005b60c0811061266f575050565b806060602080938501015201612663565b805115610e9f5760200190565b805160011015610e9f5760400190565b805160021015610e9f5760600190565b805160031015610e9f5760800190565b805160041015610e9f5760a00190565b805160051015610e9f5760c00190565b8051821015610e9f5760209160051b010190565b6040519060e0820182811067ffffffffffffffff82111761026357604052606060c08360008152600060208201526000604082015282808201528260808201528260a08201520152565b6040513d6000823e3d90fd5b1561274e57565b608460405162461bcd60e51b815260206004820152603360248201527f54686520636c69656e742068617320616c72656164792074616b656e2074686960448201527f732074797065206f6620696e737572616e6365000000000000000000000000006064820152fd5b156127bf57565b608460405162461bcd60e51b815260206004820152602b60248201527f54686520636c69656e742073686f756c642073656e642045544820746f20627560448201527f7920696e737572616e63650000000000000000000000000000000000000000006064820152fd5b90670de0b6b3a7640000918281029281840414901517156123a457565b906064820291808304606414901517156123a457565b908160011b91808304600214901517156123a457565b818102929181159184041417156123a457565b1561288c57565b606460405162461bcd60e51b815260206004820152601c60248201527f596f752073686f756c64206275792077697468206c65737320455448000000006044820152fd5b156128d757565b608460405162461bcd60e51b815260206004820152602b60248201527f4c697175696469747920646f6573206e6f7420657869737420666f722074686960448201527f7320696e737572616e63650000000000000000000000000000000000000000006064820152fd5b811561294b570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b90815167ffffffffffffffff8111610263576129a08161299b6004546107e3565b611f16565b602080601f83116001146129d6575081906129d193946000926120035750506000198260011b9260031b1c19161790565b600455565b90601f19831694612a0960046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90565b926000905b878210612a46575050836001959610612a2d575b505050811b01600455565b015160001960f88460031b161c19169055388080612a22565b80600185968294968601518155019501930190612a0e565b9060608252600091601c54612a72816107e3565b806060840152608091600190600181169081600014612b185750600114612aba575b505050612aac838261031f9495036020840152610836565b9060408183039101526108eb565b601c600090815295507f0e4562a10381dec21b205ed72637e6b1b523bdd0e4d4d50af5cd23dd4500a2115b828710612b03575050505091820160800191612aac61031f38612a94565b80548786018501526020909601958101612ae5565b61031f969750612aac9450608093925060ff1991501682850152151560051b830101939238612a94565b90612b4c826102ac565b612b596040519182610268565b828152601f19612b6982946102ac565b0190602036910137565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015612cb6575b506d04ee2d6d415b85acef810000000080831015612ca7575b50662386f26fc1000080831015612c98575b506305f5e10080831015612c89575b5061271080831015612c7a575b506064821015612c6a575b600a80921015612c60575b600190816021612c0b60018701612b42565b95860101905b612c1d575b5050505090565b600019849101917f30313233343536373839616263646566000000000000000000000000000000008282061a835304918215612c5b57919082612c11565b612c16565b9160010191612bf9565b9190606460029104910191612bee565b60049193920491019138612be3565b60089193920491019138612bd6565b60109193920491019138612bc7565b60209193920491019138612bb5565b604093508104915038612b9c565b815115612cd15760a00152565b60046040517ffe936cb7000000000000000000000000000000000000000000000000000000008152fd5b60405190612d0882610247565b600c82527f636f64654c6f636174696f6e00000000000000000000000000000000000000006020830152565b60405190612d4182610247565b600882527f6c616e67756167650000000000000000000000000000000000000000000000006020830152565b6001111561111f57565b60405190612d8482610247565b600682527f736f7572636500000000000000000000000000000000000000000000000000006020830152565b60405190612dbd82610247565b600482527f61726773000000000000000000000000000000000000000000000000000000006020830152565b60405190612df682610247565b600f82527f736563726574734c6f636174696f6e00000000000000000000000000000000006020830152565b60405190612e2f82610247565b600782527f73656372657473000000000000000000000000000000000000000000000000006020830152565b60405190612e6882610247565b600982527f62797465734172677300000000000000000000000000000000000000000000006020830152565b612e9c6131e0565b90612eae612ea8612cfb565b83613230565b612ecb8151612ebc81611115565b612ec581611115565b836132f3565b612ed6612ea8612d34565b612ef06040820151612ee781612d6d565b612ec581612d6d565b612efb612ea8612d77565b612f09606082015183613230565b60a08101805151613021575b506080810190815151612f89575b60c0915001805151612f36575b50515190565b91612f42612ea8612e5b565b612f4b82613394565b60005b83518051821015612f765790612f70612f69826001946126dd565b51856134bc565b01612f4e565b50509150612f838161342f565b38612f30565b602081018051612f9881611115565b612fa181611115565b15612ff75760c092612fda612ff292612fc1612fbb612de9565b88613230565b51612fcb81611115565b612fd481611115565b866132f3565b612feb612fe5612e22565b86613230565b51846134bc565b612f23565b60046040517fa80d31f7000000000000000000000000000000000000000000000000000000008152fd5b9261303361302d612db0565b84613230565b61303c83613394565b60005b84518051821015613067579061306161305a826001946126dd565b5186613230565b0161303f565b505092506130748261342f565b38612f15565b908160209103126102ff575190565b6130da9060209263ffffffff9460405195869485947f461d2762000000000000000000000000000000000000000000000000000000008652610c91600487015260a0602487015260a4860190610979565b92600160448601521660648401526084830152038160006001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000165af190811561194357600091613156575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b613178915060203d60201161317e575b6131708183610268565b81019061307a565b3861312c565b503d613166565b81511561319c576000808252604082015260600152565b60046040517f22ce3edd000000000000000000000000000000000000000000000000000000008152fd5b604051906131d382610247565b6000602083606081520152565b6040516131ec81610247565b6131f46131c6565b80825260208201600081526132076131c6565b5061010060208301526040518092526000825261012082019182106102ff576000916040525290565b815161327592919067ffffffffffffffff81169060178211613278576132609150606060ff84519216179061398b565b505b519061326c6131c6565b50805191613c0b565b50565b5060ff811161329d576132979061328f8351613792565b508251613b97565b50613262565b61ffff81116132bc57613297906132b4835161372d565b508251613b0c565b63ffffffff81116132dd57613297906132d583516136c8565b508251613a81565b613297906132eb8351613658565b5082516139f6565b908151916132ff6131c6565b5082515160018101908181116123a4576020850151811015613358575b60c26020610c289651928301015380518211613350575b50506040519160208301526020825261334b82610247565b6134bc565b523880613333565b8160011b94828604600214831517156123a45760208161338a610c289861338360c295519184613541565b5082613593565b509650505061331c565b80519061339f6131c6565b5081515160018101908181116123a45760208401518110156133ed575b609f60208095519283010153805182116133e5575b505001805190600182018092116123a45752565b5238806133d1565b8160011b93828504600214831517156123a4576020816134168297613383609f95519184613541565b50955050506133bc565b90601f1982019182116123a457565b80519061343a6131c6565b5081515160018101908181116123a4576020840151811015613489575b60ff6020809551928301015380518211613481575b50500180519060001982019182116123a45752565b52388061346c565b8160011b93828504600214831517156123a4576020816134b2829761338360ff95519184613541565b5095505050613457565b815161327592919067ffffffffffffffff811690601782116134ec576132609150604060ff84519216179061398b565b5060ff8111613503576132979061328f8351613926565b61ffff811161351a57613297906132b483516138c1565b63ffffffff811161353357613297906132d5835161385c565b613297906132eb83516137f7565b9061354a6131c6565b50601f811680613579575b50806020830152604051908183526000825281016020019081106102ff5760405290565b602003602081116123a45781018091116123a45738613555565b9061359c6131c6565b508051906135a86131c6565b506135b68151831115613c04565b825151916135c48184612521565b60209260208601518211613641575b602091865183815197820101968211613639575b505001915b808210156136115750600019906020036101000a019081199051169082511617905290565b90919261362d6136276136339286518152612513565b94612513565b92613420565b906135ec565b5238806135e7565b61365361364d8361285c565b87613cb7565b6135d3565b6136606131c6565b5080515160018101908181116123a4576020830151811015613699575b607b6020845192830101538051821161369557505090565b5290565b8160011b828104600214831517156123a4576136c2906136bb85519186613541565b5084613593565b5061367d565b6136d06131c6565b5080515160018101908181116123a4576020830151811015613705575b607a6020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613727906136bb85519186613541565b506136ed565b6137356131c6565b5080515160018101908181116123a457602083015181101561376a575b60796020845192830101538051821161369557505090565b8160011b828104600214831517156123a45761378c906136bb85519186613541565b50613752565b61379a6131c6565b5080515160018101908181116123a45760208301518110156137cf575b60786020845192830101538051821161369557505090565b8160011b828104600214831517156123a4576137f1906136bb85519186613541565b506137b7565b6137ff6131c6565b5080515160018101908181116123a4576020830151811015613834575b605b6020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613856906136bb85519186613541565b5061381c565b6138646131c6565b5080515160018101908181116123a4576020830151811015613899575b605a6020845192830101538051821161369557505090565b8160011b828104600214831517156123a4576138bb906136bb85519186613541565b50613881565b6138c96131c6565b5080515160018101908181116123a45760208301518110156138fe575b60596020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613920906136bb85519186613541565b506138e6565b61392e6131c6565b5080515160018101908181116123a4576020830151811015613963575b60586020845192830101538051821161369557505090565b8160011b828104600214831517156123a457613985906136bb85519186613541565b5061394b565b906139946131c6565b5081515160018101918282116123a45760208401518210156139c7575b6020845192830101538051821161369557505090565b8260011b838104600214841517156123a4576139f0906139e986519187613541565b5085613593565b506139b1565b906139ff6131c6565b508151518060080191826008116123a45760208401518311613a59575b6008845192830101907fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000008251161790528051821161369557505090565b8260011b838104600214841517156123a457613a7b906139e986519187613541565b50613a1c565b90613a8a6131c6565b508151518060040191826004116123a45760208401518311613ae4575b6004845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008251161790528051821161369557505090565b8260011b838104600214841517156123a457613b06906139e986519187613541565b50613aa7565b90613b156131c6565b508151518060020191826002116123a45760208401518311613b6f575b6002845192830101907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00008251161790528051821161369557505090565b8260011b838104600214841517156123a457613b91906139e986519187613541565b50613b32565b90613ba06131c6565b508151518060010191826001116123a45760208401518311613bdc575b60018451928301019060ff198251161790528051821161369557505090565b8260011b838104600214841517156123a457613bfe906139e986519187613541565b50613bbd565b156102ff57565b9190613c156131c6565b50613c238151831115613c04565b825151916020613c338285612521565b928193828701518111613ca0575b865183815197820101968211613c98575b505001915b80821015613c7c5750600019906020036101000a019081199051169082511617905290565b90919261362d613627613c929286518152612513565b90613c57565b523880613c52565b613cb2613cac8261285c565b88613cb7565b613c41565b9061327591613cc881519282613541565b5061359356fea26469706673582212204971d1326488b660aab75aba6e844e5ae4c3bc970b74aff4284f50b6b8b73b8964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint256)": {
        "details": "Buy weather insurance."
      },
      "claimInsurancePayout(uint256)": {
        "details": "Claim insurance"
      },
      "constructor": {
        "details": "Constructor      initialize global variable for insurance ids"
      },
      "fundInsurance(uint256)": {
        "details": "liquidity providers can deposit funds in any amount to support any insurance"
      },
      "getInsuranceFunds(uint256)": {
        "details": "to see how much fund an insurance is supported with"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "payout(uint256,address)": {
        "details": "Transfers eligible payout funds to insuree"
      },
      "registerInsurance(string,uint256,uint256,uint8,string,string,string,uint256,uint256)": {
        "details": "Register insurance by provising all required fields. The caller should be an insurance provider"
      },
      "registerInsuranceProvider(address)": {
        "details": "Add an insurance to the registration queue      Can only be called from InsuranceApp contract"
      },
      "registerValidator()": {
        "details": "to register a validator."
      }
    },
    "stateVariables": {
      "externalNullifierHash": {
        "details": "The keccak256 hash of the externalNullifier (unique identifier of the action performed), combination of appId and action"
      },
      "groupId": {
        "details": "The World ID group ID (1 for Orb-verified)"
      },
      "nullifierHashes": {
        "details": "Whether a nullifier hash has been used already. Used to guarantee an action is only performed once by a single person"
      },
      "worldId": {
        "details": "The address of the World ID Router contract that will be used for verifying proofs"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidNullifier()": [
        {
          "notice": "Thrown when attempting to reuse a nullifier"
        }
      ]
    },
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3706,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 3708,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3710,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_lastError",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 3712,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "contractOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3716,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "registeredInsuranceProvider",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3719,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "providers",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3722,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "alreadyFundedInsuranceProviders",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3726,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "numliquidityproviders",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3731,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insurancelps",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3735,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceliquidity",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3741,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "hasProvidedLiquidity",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3747,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "claimablePayout",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3780,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insurances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Insurance)3775_storage)"
      },
      {
        "astId": 3786,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "liquidityperlp",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3792,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "clientinsured",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 3797,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceProviderInsurees",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 3803,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuredamount",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3809,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuredpayout",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3811,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceId",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 3814,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "validators",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3817,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceIds",
        "offset": 0,
        "slot": "22",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3821,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "validatorAlreadyExists",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3866,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "router",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 3869,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "source",
        "offset": 0,
        "slot": "25",
        "type": "t_string_storage"
      },
      {
        "astId": 3872,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "gasLimit",
        "offset": 0,
        "slot": "26",
        "type": "t_uint32"
      },
      {
        "astId": 3875,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "donID",
        "offset": 0,
        "slot": "27",
        "type": "t_bytes32"
      },
      {
        "astId": 3877,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "character",
        "offset": 0,
        "slot": "28",
        "type": "t_string_storage"
      },
      {
        "astId": 3898,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(TypeOfInsurance)3751": {
        "encoding": "inplace",
        "label": "enum InsuranceData.TypeOfInsurance",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Insurance)3775_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InsuranceData.Insurance)",
        "numberOfBytes": "32",
        "value": "t_struct(Insurance)3775_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Insurance)3775_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceData.Insurance",
        "members": [
          {
            "astId": 3753,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3755,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3757,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3760,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "typeOfIns",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TypeOfInsurance)3751"
          },
          {
            "astId": 3762,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "provider",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3764,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "lat",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3766,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "lon",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 3768,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "name",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 3770,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "description",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 3772,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "riskNumerator",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3774,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "riskDenominator",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}